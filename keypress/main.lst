
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000e6  0000015a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006f0  00000000  00000000  0000015c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000c8c  00000000  00000000  0000084c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  000014d8  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000014ec  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	39 d0       	rcall	.+114    	; 0xa6 <main>
  34:	56 c0       	rjmp	.+172    	; 0xe2 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <delay_ms>:

/*
 * Delay in ms
 */
void delay_ms(unsigned short ms){
    for(ms /= 10; ms > 0; ms--)
  38:	9c 01       	movw	r18, r24
  3a:	ad ec       	ldi	r26, 0xCD	; 205
  3c:	bc ec       	ldi	r27, 0xCC	; 204
  3e:	45 d0       	rcall	.+138    	; 0xca <__umulhisi3>
  40:	96 95       	lsr	r25
  42:	87 95       	ror	r24
  44:	96 95       	lsr	r25
  46:	87 95       	ror	r24
  48:	96 95       	lsr	r25
  4a:	87 95       	ror	r24
  4c:	00 97       	sbiw	r24, 0x00	; 0
  4e:	41 f0       	breq	.+16     	; 0x60 <__SREG__+0x21>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  50:	e3 ec       	ldi	r30, 0xC3	; 195
  52:	f9 e0       	ldi	r31, 0x09	; 9
  54:	31 97       	sbiw	r30, 0x01	; 1
  56:	f1 f7       	brne	.-4      	; 0x54 <__SREG__+0x15>
  58:	00 c0       	rjmp	.+0      	; 0x5a <__SREG__+0x1b>
  5a:	00 00       	nop
  5c:	01 97       	sbiw	r24, 0x01	; 1
  5e:	c1 f7       	brne	.-16     	; 0x50 <__SREG__+0x11>
  60:	08 95       	ret

00000062 <keypress>:
        _delay_ms(10);
}

BYTE keypress(){
    BYTE temp1;
    temp1 = ~PIND;
  62:	80 b3       	in	r24, 0x10	; 16
  64:	48 2f       	mov	r20, r24
  66:	40 95       	com	r20
    if(!(temp1 & key_mask))
  68:	84 2f       	mov	r24, r20
  6a:	8c 70       	andi	r24, 0x0C	; 12
  6c:	d9 f0       	breq	.+54     	; 0xa4 <keypress+0x42>
  6e:	2a e0       	ldi	r18, 0x0A	; 10
  70:	30 e0       	ldi	r19, 0x00	; 0
  72:	83 ec       	ldi	r24, 0xC3	; 195
  74:	99 e0       	ldi	r25, 0x09	; 9
  76:	01 97       	sbiw	r24, 0x01	; 1
  78:	f1 f7       	brne	.-4      	; 0x76 <keypress+0x14>
  7a:	00 c0       	rjmp	.+0      	; 0x7c <keypress+0x1a>
  7c:	00 00       	nop
  7e:	21 50       	subi	r18, 0x01	; 1
  80:	31 09       	sbc	r19, r1

/*
 * Delay in ms
 */
void delay_ms(unsigned short ms){
    for(ms /= 10; ms > 0; ms--)
  82:	b9 f7       	brne	.-18     	; 0x72 <keypress+0x10>
    BYTE temp1;
    temp1 = ~PIND;
    if(!(temp1 & key_mask))
        return 0;
    delay_ms(keypress_dly);
    temp1 &= ~PIND & key_mask;
  84:	90 b3       	in	r25, 0x10	; 16
  86:	89 2f       	mov	r24, r25
  88:	90 e0       	ldi	r25, 0x00	; 0
  8a:	80 95       	com	r24
  8c:	90 95       	com	r25
  8e:	8c 70       	andi	r24, 0x0C	; 12
  90:	99 27       	eor	r25, r25
  92:	84 23       	and	r24, r20
    while(~PIND & key_mask);
  94:	20 b3       	in	r18, 0x10	; 16
  96:	30 e0       	ldi	r19, 0x00	; 0
  98:	20 95       	com	r18
  9a:	30 95       	com	r19
  9c:	2c 70       	andi	r18, 0x0C	; 12
  9e:	33 27       	eor	r19, r19
  a0:	23 2b       	or	r18, r19
  a2:	c1 f7       	brne	.-16     	; 0x94 <keypress+0x32>
    return temp1;
}
  a4:	08 95       	ret

000000a6 <main>:

int main(){
    BYTE key, count = 0;
        DDRB = 1 << PIN0 | 1 << PIN1 | 1 << PIN2 | 1 << PIN3;   // 1:out 0:in
  a6:	8f e0       	ldi	r24, 0x0F	; 15
  a8:	87 bb       	out	0x17, r24	; 23
    while(~PIND & key_mask);
    return temp1;
}

int main(){
    BYTE key, count = 0;
  aa:	c0 e0       	ldi	r28, 0x00	; 0
        DDRB = 1 << PIN0 | 1 << PIN1 | 1 << PIN2 | 1 << PIN3;   // 1:out 0:in
//         PORTD |= key_mask;      // intern pull-ups
        for(;;){
            key = keypress();
  ac:	da df       	rcall	.-76     	; 0x62 <keypress>
            if(key == (1<< PIN2)){
  ae:	84 30       	cpi	r24, 0x04	; 4
  b0:	31 f0       	breq	.+12     	; 0xbe <main+0x18>
            
                count++;
            } else if (key == (1 << PIN3)){
  b2:	88 30       	cpi	r24, 0x08	; 8
  b4:	39 f0       	breq	.+14     	; 0xc4 <main+0x1e>
            
            count = 0;
            }
            PORTB = count;
  b6:	c8 bb       	out	0x18, r28	; 24
int main(){
    BYTE key, count = 0;
        DDRB = 1 << PIN0 | 1 << PIN1 | 1 << PIN2 | 1 << PIN3;   // 1:out 0:in
//         PORTD |= key_mask;      // intern pull-ups
        for(;;){
            key = keypress();
  b8:	d4 df       	rcall	.-88     	; 0x62 <keypress>
            if(key == (1<< PIN2)){
  ba:	84 30       	cpi	r24, 0x04	; 4
  bc:	d1 f7       	brne	.-12     	; 0xb2 <main+0xc>
            
                count++;
  be:	cf 5f       	subi	r28, 0xFF	; 255
            } else if (key == (1 << PIN3)){
            
            count = 0;
            }
            PORTB = count;
  c0:	c8 bb       	out	0x18, r28	; 24
  c2:	fa cf       	rjmp	.-12     	; 0xb8 <main+0x12>
            if(key == (1<< PIN2)){
            
                count++;
            } else if (key == (1 << PIN3)){
            
            count = 0;
  c4:	c0 e0       	ldi	r28, 0x00	; 0
            }
            PORTB = count;
  c6:	c8 bb       	out	0x18, r28	; 24
  c8:	f7 cf       	rjmp	.-18     	; 0xb8 <main+0x12>

000000ca <__umulhisi3>:
  ca:	a2 9f       	mul	r26, r18
  cc:	b0 01       	movw	r22, r0
  ce:	b3 9f       	mul	r27, r19
  d0:	c0 01       	movw	r24, r0
  d2:	a3 9f       	mul	r26, r19
  d4:	01 d0       	rcall	.+2      	; 0xd8 <__umulhisi3+0xe>
  d6:	b2 9f       	mul	r27, r18
  d8:	70 0d       	add	r23, r0
  da:	81 1d       	adc	r24, r1
  dc:	11 24       	eor	r1, r1
  de:	91 1d       	adc	r25, r1
  e0:	08 95       	ret

000000e2 <_exit>:
  e2:	f8 94       	cli

000000e4 <__stop_program>:
  e4:	ff cf       	rjmp	.-2      	; 0xe4 <__stop_program>
