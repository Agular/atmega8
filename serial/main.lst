
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000150  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00000150  000001c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000008c4  00000000  00000000  000001cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000cb4  00000000  00000000  00000a90  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  00001744  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001758  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	24 c0       	rjmp	.+72     	; 0x4c <__bad_interrupt>
   4:	23 c0       	rjmp	.+70     	; 0x4c <__bad_interrupt>
   6:	22 c0       	rjmp	.+68     	; 0x4c <__bad_interrupt>
   8:	21 c0       	rjmp	.+66     	; 0x4c <__bad_interrupt>
   a:	20 c0       	rjmp	.+64     	; 0x4c <__bad_interrupt>
   c:	1f c0       	rjmp	.+62     	; 0x4c <__bad_interrupt>
   e:	1e c0       	rjmp	.+60     	; 0x4c <__bad_interrupt>
  10:	1d c0       	rjmp	.+58     	; 0x4c <__bad_interrupt>
  12:	1c c0       	rjmp	.+56     	; 0x4c <__bad_interrupt>
  14:	1b c0       	rjmp	.+54     	; 0x4c <__bad_interrupt>
  16:	1a c0       	rjmp	.+52     	; 0x4c <__bad_interrupt>
  18:	19 c0       	rjmp	.+50     	; 0x4c <__bad_interrupt>
  1a:	18 c0       	rjmp	.+48     	; 0x4c <__bad_interrupt>
  1c:	17 c0       	rjmp	.+46     	; 0x4c <__bad_interrupt>
  1e:	16 c0       	rjmp	.+44     	; 0x4c <__bad_interrupt>
  20:	15 c0       	rjmp	.+42     	; 0x4c <__bad_interrupt>
  22:	14 c0       	rjmp	.+40     	; 0x4c <__bad_interrupt>
  24:	13 c0       	rjmp	.+38     	; 0x4c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e0 e5       	ldi	r30, 0x50	; 80
  3a:	f1 e0       	ldi	r31, 0x01	; 1
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a8 36       	cpi	r26, 0x68	; 104
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>
  48:	3a d0       	rcall	.+116    	; 0xbe <main>
  4a:	80 c0       	rjmp	.+256    	; 0x14c <_exit>

0000004c <__bad_interrupt>:
  4c:	d9 cf       	rjmp	.-78     	; 0x0 <__vectors>

0000004e <delay_ms>:
#define UBRR ((F_CPU/(16UL*BAUD))-1)
/*
 * Delay in ms
 */
void delay_ms(unsigned short ms){
    for(ms /= 10; ms > 0; ms--)
  4e:	9c 01       	movw	r18, r24
  50:	ad ec       	ldi	r26, 0xCD	; 205
  52:	bc ec       	ldi	r27, 0xCC	; 204
  54:	6f d0       	rcall	.+222    	; 0x134 <__umulhisi3>
  56:	96 95       	lsr	r25
  58:	87 95       	ror	r24
  5a:	96 95       	lsr	r25
  5c:	87 95       	ror	r24
  5e:	96 95       	lsr	r25
  60:	87 95       	ror	r24
  62:	00 97       	sbiw	r24, 0x00	; 0
  64:	41 f0       	breq	.+16     	; 0x76 <delay_ms+0x28>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  66:	ef e1       	ldi	r30, 0x1F	; 31
  68:	fe e4       	ldi	r31, 0x4E	; 78
  6a:	31 97       	sbiw	r30, 0x01	; 1
  6c:	f1 f7       	brne	.-4      	; 0x6a <delay_ms+0x1c>
  6e:	00 c0       	rjmp	.+0      	; 0x70 <delay_ms+0x22>
  70:	00 00       	nop
  72:	01 97       	sbiw	r24, 0x01	; 1
  74:	c1 f7       	brne	.-16     	; 0x66 <delay_ms+0x18>
  76:	08 95       	ret

00000078 <USART_Init>:
        _delay_ms(10);
}


void USART_Init(unsigned long ubrr){
  78:	0f 93       	push	r16
  7a:	1f 93       	push	r17
    
    UBRRH = (unsigned char) (ubrr >> 8);
  7c:	07 2f       	mov	r16, r23
  7e:	18 2f       	mov	r17, r24
  80:	29 2f       	mov	r18, r25
  82:	33 27       	eor	r19, r19
  84:	00 bd       	out	0x20, r16	; 32
    UBRRL = (unsigned char) ubrr&0xff;
  86:	69 b9       	out	0x09, r22	; 9
// Aktivieren von receiver und transmitter
// RXEN Receive enable
// TXEN Transmit enable
// RXCIE Receive complete Interrupt enable
    UCSRB = (1<<RXEN) |(1<<TXEN);//|(1<<RXCIE);
  88:	88 e1       	ldi	r24, 0x18	; 24
  8a:	8a b9       	out	0x0a, r24	; 10

/* Einstellen des Datenformats: 8 Datenbits, 1 Stoppbit, keine Parit채tskontrolle */
    UCSRC = (1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0); // 8N1
  8c:	86 e8       	ldi	r24, 0x86	; 134
  8e:	80 bd       	out	0x20, r24	; 32

// Flush Receive-Buffer (entfernen evtl. vorhandener ung체ltiger Werte)
    do
    {
       uint8_t dummy;
          (void) (dummy = UDR);
  90:	8c b1       	in	r24, 0x0c	; 12
    }
    while (UCSRA & (1 << RXC));
  92:	5f 99       	sbic	0x0b, 7	; 11
  94:	fd cf       	rjmp	.-6      	; 0x90 <USART_Init+0x18>
    sei();
  96:	78 94       	sei
}
  98:	1f 91       	pop	r17
  9a:	0f 91       	pop	r16
  9c:	08 95       	ret

0000009e <USART_Transmit>:

void USART_Transmit(unsigned char data){
    
    while(! (UCSRA & (1<<UDRE)));
  9e:	5d 9b       	sbis	0x0b, 5	; 11
  a0:	fe cf       	rjmp	.-4      	; 0x9e <USART_Transmit>
    UDR = data;
  a2:	8c b9       	out	0x0c, r24	; 12
  a4:	08 95       	ret

000000a6 <uputs>:
}

void uputs(char *s){
  a6:	fc 01       	movw	r30, r24
    while(*s){
  a8:	90 81       	ld	r25, Z
  aa:	99 23       	and	r25, r25
  ac:	39 f0       	breq	.+14     	; 0xbc <uputs+0x16>
  ae:	31 96       	adiw	r30, 0x01	; 1
    sei();
}

void USART_Transmit(unsigned char data){
    
    while(! (UCSRA & (1<<UDRE)));
  b0:	5d 9b       	sbis	0x0b, 5	; 11
  b2:	fe cf       	rjmp	.-4      	; 0xb0 <uputs+0xa>
    UDR = data;
  b4:	9c b9       	out	0x0c, r25	; 12
}

void uputs(char *s){
    while(*s){
  b6:	91 91       	ld	r25, Z+
  b8:	91 11       	cpse	r25, r1
  ba:	fa cf       	rjmp	.-12     	; 0xb0 <uputs+0xa>
  bc:	08 95       	ret

000000be <main>:
}


void USART_Init(unsigned long ubrr){
    
    UBRRH = (unsigned char) (ubrr >> 8);
  be:	10 bc       	out	0x20, r1	; 32
    UBRRL = (unsigned char) ubrr&0xff;
  c0:	83 e3       	ldi	r24, 0x33	; 51
  c2:	89 b9       	out	0x09, r24	; 9
// Aktivieren von receiver und transmitter
// RXEN Receive enable
// TXEN Transmit enable
// RXCIE Receive complete Interrupt enable
    UCSRB = (1<<RXEN) |(1<<TXEN);//|(1<<RXCIE);
  c4:	88 e1       	ldi	r24, 0x18	; 24
  c6:	8a b9       	out	0x0a, r24	; 10

/* Einstellen des Datenformats: 8 Datenbits, 1 Stoppbit, keine Parit채tskontrolle */
    UCSRC = (1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0); // 8N1
  c8:	86 e8       	ldi	r24, 0x86	; 134
  ca:	80 bd       	out	0x20, r24	; 32

// Flush Receive-Buffer (entfernen evtl. vorhandener ung체ltiger Werte)
    do
    {
       uint8_t dummy;
          (void) (dummy = UDR);
  cc:	8c b1       	in	r24, 0x0c	; 12
    }
    while (UCSRA & (1 << RXC));
  ce:	5f 99       	sbic	0x0b, 7	; 11
  d0:	fd cf       	rjmp	.-6      	; 0xcc <main+0xe>
    sei();
  d2:	78 94       	sei
    }
}

int main(){
    USART_Init(UBRR);
        DDRB = 1 << PIN0 | 1 << PIN1 | 1 << PIN2 | 1 << PIN3;   // 1:out 0:in
  d4:	8f e0       	ldi	r24, 0x0F	; 15
  d6:	87 bb       	out	0x17, r24	; 23
        
            PORTB = 1 << PIN0;
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	88 bb       	out	0x18, r24	; 24
  dc:	82 e3       	ldi	r24, 0x32	; 50
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	ef e1       	ldi	r30, 0x1F	; 31
  e2:	fe e4       	ldi	r31, 0x4E	; 78
  e4:	31 97       	sbiw	r30, 0x01	; 1
  e6:	f1 f7       	brne	.-4      	; 0xe4 <main+0x26>
  e8:	00 c0       	rjmp	.+0      	; 0xea <main+0x2c>
  ea:	00 00       	nop
  ec:	01 97       	sbiw	r24, 0x01	; 1
#define UBRR ((F_CPU/(16UL*BAUD))-1)
/*
 * Delay in ms
 */
void delay_ms(unsigned short ms){
    for(ms /= 10; ms > 0; ms--)
  ee:	c1 f7       	brne	.-16     	; 0xe0 <main+0x22>
        DDRB = 1 << PIN0 | 1 << PIN1 | 1 << PIN2 | 1 << PIN3;   // 1:out 0:in
        
            PORTB = 1 << PIN0;
            delay_ms(500);
            
            PORTB = 0;
  f0:	18 ba       	out	0x18, r1	; 24
  f2:	e1 e6       	ldi	r30, 0x61	; 97
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	83 e5       	ldi	r24, 0x53	; 83
    sei();
}

void USART_Transmit(unsigned char data){
    
    while(! (UCSRA & (1<<UDRE)));
  f8:	5d 9b       	sbis	0x0b, 5	; 11
  fa:	fe cf       	rjmp	.-4      	; 0xf8 <main+0x3a>
    UDR = data;
  fc:	8c b9       	out	0x0c, r24	; 12
}

void uputs(char *s){
    while(*s){
  fe:	81 91       	ld	r24, Z+
 100:	81 11       	cpse	r24, r1
 102:	fa cf       	rjmp	.-12     	; 0xf8 <main+0x3a>
 104:	20 e3       	ldi	r18, 0x30	; 48
}

void USART_Transmit(unsigned char data){
    
    while(! (UCSRA & (1<<UDRE)));
    UDR = data;
 106:	3a e0       	ldi	r19, 0x0A	; 10
    sei();
}

void USART_Transmit(unsigned char data){
    
    while(! (UCSRA & (1<<UDRE)));
 108:	5d 9b       	sbis	0x0b, 5	; 11
 10a:	fe cf       	rjmp	.-4      	; 0x108 <main+0x4a>
    UDR = data;
 10c:	2c b9       	out	0x0c, r18	; 12
    sei();
}

void USART_Transmit(unsigned char data){
    
    while(! (UCSRA & (1<<UDRE)));
 10e:	5d 9b       	sbis	0x0b, 5	; 11
 110:	fe cf       	rjmp	.-4      	; 0x10e <main+0x50>
    UDR = data;
 112:	3c b9       	out	0x0c, r19	; 12
            uputs("Start\n");
            char count = '0';
            while(1){
                USART_Transmit(count);
                USART_Transmit('\n');
                count = count >= '9' ? '0':count + 1;
 114:	29 33       	cpi	r18, 0x39	; 57
 116:	64 f4       	brge	.+24     	; 0x130 <main+0x72>
 118:	2f 5f       	subi	r18, 0xFF	; 255
 11a:	82 e3       	ldi	r24, 0x32	; 50
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	ef e1       	ldi	r30, 0x1F	; 31
 120:	fe e4       	ldi	r31, 0x4E	; 78
 122:	31 97       	sbiw	r30, 0x01	; 1
 124:	f1 f7       	brne	.-4      	; 0x122 <main+0x64>
 126:	00 c0       	rjmp	.+0      	; 0x128 <main+0x6a>
 128:	00 00       	nop
 12a:	01 97       	sbiw	r24, 0x01	; 1
#define UBRR ((F_CPU/(16UL*BAUD))-1)
/*
 * Delay in ms
 */
void delay_ms(unsigned short ms){
    for(ms /= 10; ms > 0; ms--)
 12c:	c1 f7       	brne	.-16     	; 0x11e <main+0x60>
 12e:	ec cf       	rjmp	.-40     	; 0x108 <main+0x4a>
            uputs("Start\n");
            char count = '0';
            while(1){
                USART_Transmit(count);
                USART_Transmit('\n');
                count = count >= '9' ? '0':count + 1;
 130:	20 e3       	ldi	r18, 0x30	; 48
 132:	f3 cf       	rjmp	.-26     	; 0x11a <main+0x5c>

00000134 <__umulhisi3>:
 134:	a2 9f       	mul	r26, r18
 136:	b0 01       	movw	r22, r0
 138:	b3 9f       	mul	r27, r19
 13a:	c0 01       	movw	r24, r0
 13c:	a3 9f       	mul	r26, r19
 13e:	01 d0       	rcall	.+2      	; 0x142 <__umulhisi3+0xe>
 140:	b2 9f       	mul	r27, r18
 142:	70 0d       	add	r23, r0
 144:	81 1d       	adc	r24, r1
 146:	11 24       	eor	r1, r1
 148:	91 1d       	adc	r25, r1
 14a:	08 95       	ret

0000014c <_exit>:
 14c:	f8 94       	cli

0000014e <__stop_program>:
 14e:	ff cf       	rjmp	.-2      	; 0x14e <__stop_program>
